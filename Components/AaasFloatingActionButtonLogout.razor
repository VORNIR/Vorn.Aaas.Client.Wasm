@inject NavigationManager NavigationManager
<form action="authentication/logout" method="post">
    <AntiforgeryToken />
    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
    <button class="btn btn-outline-danger" type="submit" style="position:fixed; bottom:5px;left: 50%; transform: translateX(-50%); z-index:1000; border-radius:50%;">
        <i class="bi bi-person-badge-fill"></i>
    </button>
</form>
@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }
    ClaimsPrincipal User;
    private string? currentUrl;
    private string username;
    protected override async Task OnInitializedAsync()
    {
        if(AuthState is null)
            return;
        var authState = await AuthState;
        User = authState.User;
        username = User.Identity?.Name ?? User.Claims.First(c => c.Type == "name").Value;
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
